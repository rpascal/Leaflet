@using System.Configuration;

<script>


    $(function () {
        mapPageLoad();
    });

    function createGeoJsonLayer(model) {
        var baseModel = {
            data: {},
            baseStyle: function (feature) { return { color: feature.properties.PolyBorderColor } },
            newStyles: function (feature) { return {} },
            onEachFeature: function (feature, layer) { }
        }

        Object.assign(baseModel, model);
        var layer = L.geoJson(baseModel.data, {
            style: function (feature) {
                return Object.assign(baseModel.baseStyle(feature), baseModel.newStyles(feature));
            },
            onEachFeature: baseModel.onEachFeature,
        });

        return layer;
    }


    function getMap() {
        return GlobalMapRef;
    }

    var GlobalMapRef;

    var myGlobalInterval;
    var manageLoop;
    var mapLoop;

   


    var globalIndex = -1;
    var pauseGlobalLoop = false;




    function startGlobalLoop() {

        setInterval(function () {
            if (!pauseGlobalLoop) {

                globalIndex++;
                if (globalIndex == 12) { globalIndex = 0; }

                var currentIndex = globalIndex;
                var pastIndex = globalIndex == 0 ? 11 : globalIndex - 1;
                RadarModel.loop(currentIndex, pastIndex);
                WatchWarnModel.loop(currentIndex, pastIndex);
            }
        }, 1000)
    }


    function mapPageLoad()
    {

        function initializeMap ()
        {

            resize();
            var mapCreds = "AkYCCqnlgQnrspLd7YPIoAXL8s7EZ-3owXijLCpBWqHoHlEoDeYMCSr1FcZm-gs5";
            var mapCenter = [@ConfigurationManager.AppSettings["CenterLatitude"], @ConfigurationManager.AppSettings["CenterLongitude"]];

            var map = L.map('map').setView(mapCenter, 4);
            GlobalMapRef = map;

            L.tileLayer.bing(mapCreds).addTo(map);
            bindMapEvents();

            OpcosModel.init();
           
            //WatchWarnModel.init()

            WatchWarnModel.reinitilize(true);

            RadarModel.reinitialize(true)

            //$.when.apply(null, [RadarModel.init()]).then(function () {
                
    
            //})

            startGlobalLoop();
        }


        initializeMap();
    }

    function bindMapEvents() {
        var map = getMap();

        map.on("move" || "zoom", function () {
            pauseGlobalLoop = true;

        })

        map.on("moveend" || "zoomend", function () {
            pauseGlobalLoop = false;

        })
    }


</script>

    

